<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Moonstreet notes</title>
    <link>https://www.moonstreet.nl/post/</link>
    <description>Recent content in Posts on Moonstreet notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>yourname@example.com (yourname)</managingEditor>
    <webMaster>yourname@example.com (yourname)</webMaster>
    <copyright>(c) 2019 Jacqueline</copyright>
    <lastBuildDate>Fri, 22 Nov 2019 16:31:44 +0100</lastBuildDate>
    
	<atom:link href="https://www.moonstreet.nl/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Go</title>
      <link>https://www.moonstreet.nl/2019/11/22/basic-go/</link>
      <pubDate>Fri, 22 Nov 2019 16:31:44 +0100</pubDate>
      <author>yourname@example.com (yourname)</author>
      <guid>https://www.moonstreet.nl/2019/11/22/basic-go/</guid>
      <description>When learning Golang and coming from other (scripting) languages, that asterisk and ampersant may strike as a bit odd.
This is a beginner Golang post!
Let&amp;rsquo;s start with a basic Golang program outline and in the main func, let&amp;rsquo;s create a variable named a and assign it the value Three-toed sloth.
package main import ( &amp;quot;fmt&amp;quot; ) func main() { a := &amp;quot;Three-toed sloth&amp;quot; fmt.Println(a) }  Notice the : before the = and that no type was specified.</description>
    </item>
    
    <item>
      <title>Jenkins shared library notes</title>
      <link>https://www.moonstreet.nl/2019/06/30/jenkins-shared-library-notes/</link>
      <pubDate>Sun, 30 Jun 2019 13:08:28 +0200</pubDate>
      <author>yourname@example.com (yourname)</author>
      <guid>https://www.moonstreet.nl/2019/06/30/jenkins-shared-library-notes/</guid>
      <description>Resources  KeyVault plugin az cli, jq, Terraform installed on the agent Pipeline utility steps plugin https://jenkins.io/doc/pipeline/steps/pipeline-utility-steps/ https://jenkins.io/doc/book/pipeline/syntax/  Create Azure storage for Terraform This piece of code creates a storage account that can be used as Terraform backend storage.
It uses a Jenkins shared library
 It logs in with an Azure Service Principal Creates a storage account Creates a container returns the access key  Make a file named vars/azureCreateStatefileStorage.</description>
    </item>
    
    <item>
      <title>Azure Kubernetes Services and Terraform</title>
      <link>https://www.moonstreet.nl/2019/06/21/azure-kubernetes-services-and-terraform/</link>
      <pubDate>Fri, 21 Jun 2019 11:29:13 +0100</pubDate>
      <author>yourname@example.com (yourname)</author>
      <guid>https://www.moonstreet.nl/2019/06/21/azure-kubernetes-services-and-terraform/</guid>
      <description>Terraform This blogseries is about my adventures in AKS and Terraform. This first article is about Terraform.
This assumes you have an Azure account.
Prepare Create a service principal with contributor permissions on Azure Subscription level. We can fine tune the permissions later.
AZ_SUB=&amp;quot;your subscription id&amp;quot; AZ_SECRET=&amp;quot;S3cr3tPasw0rd&amp;quot; NAME=&amp;quot;terraform-partner-sub&amp;quot; az login az account set --subscription $AZ_SUB az ad sp create-for-rbac --name $NAME-installation-account --password $AZ_SECRET --years 2  Now this account has contributor permissions on the subscription level.</description>
    </item>
    
    <item>
      <title>Go Webserver</title>
      <link>https://www.moonstreet.nl/2019/02/10/go-webserver/</link>
      <pubDate>Sun, 10 Feb 2019 09:43:32 +0100</pubDate>
      <author>yourname@example.com (yourname)</author>
      <guid>https://www.moonstreet.nl/2019/02/10/go-webserver/</guid>
      <description>The last Golang post was a little bit lame so let&amp;rsquo;s do something more interesting now. Let&amp;rsquo;s create a webserver.
To create a simple webserver, we need:
 a function that can serve a page in browser (using http obviously) it should listen at a port it should respond to (handle) incoming requests it should be able to write content to the page  First create a new project structure:</description>
    </item>
    
    <item>
      <title>Getting started with Golang</title>
      <link>https://www.moonstreet.nl/2019/02/09/getting-started-with-golang/</link>
      <pubDate>Sat, 09 Feb 2019 15:16:45 +0100</pubDate>
      <author>yourname@example.com (yourname)</author>
      <guid>https://www.moonstreet.nl/2019/02/09/getting-started-with-golang/</guid>
      <description>This is yet another getting started note. This time I am trying to code in Golang.
Why, would you ask?
Obviously because of its mascotte:
Installing Golang Download Golang here https://golang.org/dl/. I am on Ubuntu, so next step is to simply unpack the executable to /usr/local.
sudo tar -C /usr/local -xzf go1.11.5.linux-amd64.tar.gz  Then add Go to your path in your profile (in my case it would be in ~/.</description>
    </item>
    
    <item>
      <title>Getting started with Prometheus</title>
      <link>https://www.moonstreet.nl/2019/01/04/getting-started-with-prometheus/</link>
      <pubDate>Fri, 04 Jan 2019 16:29:13 +0100</pubDate>
      <author>yourname@example.com (yourname)</author>
      <guid>https://www.moonstreet.nl/2019/01/04/getting-started-with-prometheus/</guid>
      <description>Prometheus delivers real-time monitoring, alerting and time-series database capabilities including powerful queries and visualizations. Written in Go, Prometheus is one of the fastest-growing projects on GitHub according to the CNCF project and is also mentioned in the Kubernetes docs.
So what does Prometheus do? Well, it collects metrics from configured targets at given intervals, evaluates rule expressions, displays the results, and can trigger alerts if some condition is observed to be true.</description>
    </item>
    
    <item>
      <title>Windows Defender Realtime Protection Check</title>
      <link>https://www.moonstreet.nl/2019/01/04/windows-defender-realtime-protection-check/</link>
      <pubDate>Fri, 04 Jan 2019 12:11:56 +0100</pubDate>
      <author>yourname@example.com (yourname)</author>
      <guid>https://www.moonstreet.nl/2019/01/04/windows-defender-realtime-protection-check/</guid>
      <description>Windows Defender is tegenwoordig een prima anti-virus programma, mits real-time protection werkt. Check of real-time protection werkt en niet wordt geblocked door een firewall via onderstaand commando:
C:\Program Files\Windows Defender&amp;gt;mpcmdrun -validatemapsconnection  p.s. werkt alleen in een command prompt met admin privileges.</description>
    </item>
    
  </channel>
</rss>