<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on Moonstreet</title>
    <link>http://localhost:1313/tags/terraform/</link>
    <description>Recent content in Terraform on Moonstreet</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 21 Dec 2021 11:24:21 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Terraform patterns: loops</title>
      <link>http://localhost:1313/post/terraform-patterns-loops/</link>
      <pubDate>Tue, 21 Dec 2021 11:24:21 +0100</pubDate>
      <guid>http://localhost:1313/post/terraform-patterns-loops/</guid>
      <description>&lt;h1 id=&#34;create-multiple-resources-with-a-loop&#34;&gt;Create multiple resources with a loop&lt;/h1&gt;&#xA;&lt;p&gt;If you want to create multiple instances of, say, an Azure resource group, you can add a for_each argument.&#xA;The for_each argument accepts a map or a set, and creates an instance for each item in that map or set.&lt;/p&gt;&#xA;&lt;p&gt;So you can create a map of key value pairs (aka a dictionary) and use it to define multiple resource groups:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;azurerm_resource_group&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;rg&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;for_each&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;projectx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;we&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;westeurope&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;projectx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dev&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;us&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;eastus&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;${each.key}-rg&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;each&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;tags&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tags&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sure enough you can also refactor the map as a variable&lt;/p&gt;</description>
    </item>
    <item>
      <title>Terraform patterns: conditionals</title>
      <link>http://localhost:1313/post/terraform-patterns-conditionals/</link>
      <pubDate>Tue, 21 Dec 2021 08:24:21 +0100</pubDate>
      <guid>http://localhost:1313/post/terraform-patterns-conditionals/</guid>
      <description>&lt;p&gt;This is a back to basics post about a Terraform pattern: conditionals.&#xA;It&#39;s Azure centric.&lt;/p&gt;&#xA;&lt;h2 id=&#34;conditionals-if-then-else&#34;&gt;Conditionals: if then else&lt;/h2&gt;&#xA;&lt;p&gt;Imagine we want a resource group name to follow the rules of naming convention but in other cases we don&#39;t want to.&#xA;So if there is a naming convention, implement that, if not than do not.&lt;/p&gt;&#xA;&lt;p&gt;For example, the naming convention should follow this pattern: &lt;code&gt;&amp;lt;projectname&amp;gt;-&amp;lt;environment&amp;gt;-&amp;lt;resource&amp;gt;&lt;/code&gt; .&#xA;We want every resource to be prefixed by that pattern. So if the prefix is set, please use the prefix pattern, else just take the variable of the full name.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Kubernetes node pools with Terraform</title>
      <link>http://localhost:1313/post/aks-nodepools/</link>
      <pubDate>Tue, 29 Dec 2020 13:30:21 +0100</pubDate>
      <guid>http://localhost:1313/post/aks-nodepools/</guid>
      <description>&lt;p&gt;&lt;strong&gt;In Azure Kubernetes Service (AKS), nodes of the same configuration are grouped together into node pools.&lt;/strong&gt; These node pools contain the underlying VMs that run your applications.&#xA;The initial number of nodes and their size (SKU) is defined when you create an AKS cluster, which creates a system node pool. To support applications that have different compute or storage demands, you can create additional user node pools.&lt;/p&gt;&#xA;&lt;p&gt;I just copied the above text from &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/aks/use-multiple-node-pools&#34;&gt;here&lt;/a&gt; because it is just right. To have a full understanding of node pools I encourage you to read the whole article. Also, if you plan to run Azure Kubernetes in production, I can recommend &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/aks/concepts-clusters-workloads&#34;&gt;this article&lt;/a&gt; as well. It&#39;s all about the sizing baby!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
