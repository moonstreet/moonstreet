<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure on Moonstreet</title><link>https://www.moonstreet.nl/tags/azure/</link><description>Recent content in Azure on Moonstreet</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Tue, 21 Dec 2021 11:24:21 +0100</lastBuildDate><atom:link href="https://www.moonstreet.nl/tags/azure/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform patterns: loops</title><link>https://www.moonstreet.nl/post/terraform-patterns-loops/</link><pubDate>Tue, 21 Dec 2021 11:24:21 +0100</pubDate><guid>https://www.moonstreet.nl/post/terraform-patterns-loops/</guid><description>
&lt;h1 id="create-multiple-resources-with-a-loop">Create multiple resources with a loop&lt;/h1>
&lt;p>If you want to create multiple instances of, say, an Azure resource group, you can add a for_each argument.
The for_each argument accepts a map or a set, and creates an instance for each item in that map or set.&lt;/p>
&lt;p>So you can create a map of key value pairs (aka a dictionary) and use it to define multiple resource groups:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="n">resource&lt;/span> &lt;span class="s2">&amp;#34;azurerm_resource_group&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;rg&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="n">for_each&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="n">projectx&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dev&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">we&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;westeurope&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">projectx&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dev&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">us&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;eastus&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;${each.key}-rg&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="n">location&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">each&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="n">tags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">var&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">tags&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sure enough you can also refactor the map as a variable&lt;/p></description></item><item><title>Terraform patterns: conditionals</title><link>https://www.moonstreet.nl/post/terraform-patterns-conditionals/</link><pubDate>Tue, 21 Dec 2021 08:24:21 +0100</pubDate><guid>https://www.moonstreet.nl/post/terraform-patterns-conditionals/</guid><description>
&lt;p>This is a back to basics post about a Terraform pattern: conditionals.
It's Azure centric.&lt;/p>
&lt;h2 id="conditionals-if-then-else">Conditionals: if then else&lt;/h2>
&lt;p>Imagine we want a resource group name to follow the rules of naming convention but in other cases we don't want to.
So if there is a naming convention, implement that, if not than do not.&lt;/p>
&lt;p>For example, the naming convention should follow this pattern: &lt;code>&amp;lt;projectname&amp;gt;-&amp;lt;environment&amp;gt;-&amp;lt;resource&amp;gt;&lt;/code> .
We want every resource to be prefixed by that pattern. So if the prefix is set, please use the prefix pattern, else just take the variable of the full name.&lt;/p></description></item><item><title>Azure Kubernetes node pools with Terraform</title><link>https://www.moonstreet.nl/post/aks-nodepools/</link><pubDate>Tue, 29 Dec 2020 13:30:21 +0100</pubDate><guid>https://www.moonstreet.nl/post/aks-nodepools/</guid><description>
&lt;p>&lt;strong>In Azure Kubernetes Service (AKS), nodes of the same configuration are grouped together into node pools.&lt;/strong> These node pools contain the underlying VMs that run your applications.
The initial number of nodes and their size (SKU) is defined when you create an AKS cluster, which creates a system node pool. To support applications that have different compute or storage demands, you can create additional user node pools.&lt;/p>
&lt;p>I just copied the above text from &lt;a href="https://docs.microsoft.com/en-us/azure/aks/use-multiple-node-pools">here&lt;/a> because it is just right. To have a full understanding of node pools I encourage you to read the whole article. Also, if you plan to run Azure Kubernetes in production, I can recommend &lt;a href="https://docs.microsoft.com/en-us/azure/aks/concepts-clusters-workloads">this article&lt;/a> as well. It's all about the sizing baby!&lt;/p></description></item></channel></rss>