<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Moonstreet</title>
    <link>https://moonstreet.nl/tags/kubernetes/</link>
    <description>Recent content in kubernetes on Moonstreet</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Tue, 21 Dec 2021 11:24:21 +0100</lastBuildDate><atom:link href="https://moonstreet.nl/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Terraform patterns: loops</title>
      <link>https://moonstreet.nl/post/terraform-patterns-loops/</link>
      <pubDate>Tue, 21 Dec 2021 11:24:21 +0100</pubDate>
      
      <guid>https://moonstreet.nl/post/terraform-patterns-loops/</guid>
      <description>Create multiple resources with a loop If you want to create multiple instances of, say, an Azure resource group, you can add a for_each argument. The for_each argument accepts a map or a set, and creates an instance for each item in that map or set.
So you can create a map of key value pairs (aka a dictionary) and use it to define multiple resource groups:
1resource &amp;#34;azurerm_resource_group&amp;#34; &amp;#34;rg&amp;#34; { 2 for_each = { 3 projectx-dev-we = &amp;#34;westeurope&amp;#34; 4 projectx-dev-us = &amp;#34;eastus&amp;#34; 5 } 6 7 name = &amp;#34;${each.</description>
    </item>
    
    <item>
      <title>Terraform patterns: conditionals</title>
      <link>https://moonstreet.nl/post/terraform-patterns-conditionals/</link>
      <pubDate>Tue, 21 Dec 2021 08:24:21 +0100</pubDate>
      
      <guid>https://moonstreet.nl/post/terraform-patterns-conditionals/</guid>
      <description>This is a back to basics post about a Terraform pattern: conditionals. It&#39;s Azure centric.
Conditionals: if then else Imagine we want a resource group name to follow the rules of naming convention but in other cases we don&#39;t want to. So if there is a naming convention, implement that, if not than do not.
For example, the naming convention should follow this pattern: &amp;lt;projectname&amp;gt;-&amp;lt;environment&amp;gt;-&amp;lt;resource&amp;gt; . We want every resource to be prefixed by that pattern.</description>
    </item>
    
    <item>
      <title>Azure Kubernetes node pools with Terraform</title>
      <link>https://moonstreet.nl/post/aks-nodepools/</link>
      <pubDate>Tue, 29 Dec 2020 13:30:21 +0100</pubDate>
      
      <guid>https://moonstreet.nl/post/aks-nodepools/</guid>
      <description>In Azure Kubernetes Service (AKS), nodes of the same configuration are grouped together into node pools. These node pools contain the underlying VMs that run your applications. The initial number of nodes and their size (SKU) is defined when you create an AKS cluster, which creates a system node pool. To support applications that have different compute or storage demands, you can create additional user node pools.
I just copied the above text from here because it is just right.</description>
    </item>
    
    <item>
      <title>Create a read-only user in Kubernetes</title>
      <link>https://moonstreet.nl/post/kubernetes-readonly/</link>
      <pubDate>Mon, 28 Dec 2020 17:10:13 +0100</pubDate>
      
      <guid>https://moonstreet.nl/post/kubernetes-readonly/</guid>
      <description>Normal users are assumed to be managed by an outside, independent service. Kubernetes does not have objects which represent normal user accounts. Normal users cannot be added to a cluster through an API call. However, any user that presents a valid certificate signed by the cluster&#39;s certificate authority (CA) is considered authenticated. So we can create a user with read-only access to the cluster, and hand the kube config file over to that that user.</description>
    </item>
    
    <item>
      <title>Install the Nginx ingress controller on K3s - or Kind - and deploy a web app</title>
      <link>https://moonstreet.nl/post/k3s-with-ingress/</link>
      <pubDate>Sat, 26 Dec 2020 16:33:46 +0100</pubDate>
      
      <guid>https://moonstreet.nl/post/k3s-with-ingress/</guid>
      <description>Here is how to quickly install Kubernetes with ingress on your laptop. I use this to test and create operators with the Operator Framework. Still learning though.
I was first using K3s but then I discovered Kind which seems to be even faster, deployment wise. Also it leaves a smaller footprint because it runs in a Docker container. (Didn&#39;t manage to run it with podman yet). So I quickly added a paragraph about Kind if you scroll down this post.</description>
    </item>
    
  </channel>
</rss>
